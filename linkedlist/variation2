// Online C compiler to run C program online
#include <stdio.h>
#include <stdlib.h>

typedef struct node{
    int data;
    struct node* next;
}Node;

typedef struct {
    Node* head;
    int count;
}List;

List *initialize() {
    List *L = malloc(sizeof(List));
    L->head = NULL;
    L->count = 0;
    
    return L;
}

void empty(List *list){
}

void insertFirst(List *list, int data){
    Node *newNode = malloc(sizeof(Node));
    
    newNode->data = data;
    if(list->head!=NULL){
        newNode->next = list->head;
    }
    else {
        newNode->next = NULL;
    }
    list->head = newNode;
    list->count++;
}

void insertLast(List *list, int data) {
    Node *newNode = malloc(sizeof(Node));
    
    newNode->data = data;
    newNode->next = NULL;
    
    Node *trav;
    
    for(trav = list->head; trav->next != NULL; trav = trav->next);
    
    trav->next = newNode;
    list->count++;
}

void insertPos(List *list, int data, int index) {
    Node *newNode = malloc(sizeof(Node));
    newNode->data = data;
    Node *trav;
    int i;
    for(trav = list->head, i = 0; i < index; trav = trav->next, i++);
    if(trav != NULL) {
        newNode->next = trav;
    } else {
        newNode->next = NULL;
    }
    
    
    if(index != 0) {
        for(trav = list->head, i = 0; i < index-1; trav = trav->next, i++);
        trav->next = newNode;
    }
    else {
        list->head = newNode;
    }
    list->count++;
}

void deleteStart(List *list) {
    Node *temp;
    temp = list->head;
    list->head = temp->next;
    free(temp);
    list->count--;
}

void deleteLast(List *list) {
    Node *trav;
    Node *temp;
    int i;
    for(trav = list->head, i = 0; i < (list->count)-2; trav = trav->next, i++);
    temp = trav->next;
    trav->next = NULL;
    free(temp);
    list->count--;
}

void deletePos(List *list, int index) {
    Node *trav;
    Node *temp;
    int i;
    for(trav = list->head, i = 0; i < index-1; trav = trav->next, i++);
    
    if(index == 0) {
        temp = list->head;
        list->head = temp->next;
    } 
    else {
        temp = trav->next;
        trav->next = temp->next;
    }
    free(temp);
    list->count--;
    
}

int retrieve(List *list, int index) {
    
}

int locate(List *list, int data);

void display(List *list) {
    Node *trav;
    printf ("Display: ");
    for(trav = list->head; trav != NULL; trav = trav->next) {
        printf("%d ", trav->data);
    }
    printf("\nCount: %d\n", list->count);
}


int main() {
    List *L;
    
    L = initialize();
    
    insertFirst(L, 19);
    insertFirst(L, 51);
    insertFirst(L, 71);
    
    insertLast(L, 23);
    display(L);
    insertPos(L, 21, 4);
    display(L);
    deleteStart(L);
    display(L);
    deleteLast(L);
    display(L);
    insertFirst(L, 24);
    insertFirst(L, 62);
    display(L);
    deletePos(L, 0);
    display(L);

    return 0;
}
